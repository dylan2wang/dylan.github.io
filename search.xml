<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Scala函数式编程基本概念理解]]></title>
      <url>http://yoursite.com/2016/11/24/Scala%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>对于如下的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1+2</div></pre></td></tr></table></figure>
<p>实际上是在Int对象1上调用名为+的方法，并把2当作参数传递给它。在scala中，方法若只有一个参数，调用的时候就可以省略 . 及括号。上式的完整写法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(1).+(2)</div></pre></td></tr></table></figure>
<p>又由于scala的上述省略规则，则结果直接转化成了1+2。在scala中有很多类似的概念。</p>
<h3 id="scala中访问数据元素为什么使用-而不是-？"><a href="#scala中访问数据元素为什么使用-而不是-？" class="headerlink" title="scala中访问数据元素为什么使用()而不是[]？"></a>scala中访问数据元素为什么使用()而不是[]？</h3><p>与scala全部元素都是类的概念一样，数组也只是类的实例。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">val greetStrings = new Array[String](3)</div><div class="line"></div><div class="line">greetStrings(0) = &quot;hello&quot;</div><div class="line">greetStrings(1) = &quot;,&quot;</div><div class="line">greetStrings(2) = &quot;words!\n&quot;</div><div class="line"></div><div class="line">for ( i &lt;- 0 to 2 )</div><div class="line">  print(greetStrings(i))</div></pre></td></tr></table></figure>
<p>greetStrings(i)会转换成greetStrings.apply(i)方法的调用。实际上，在scala中，用括号传递给变量一个或多个值参数时，scala都会把它转换成对apply方法的调用。所以scala里访问数据的元素也只不过是一种方法调用，和其他对类的操作都是一样的，这不是特例，而是通用法则。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 制作libsvm格式脚本]]></title>
      <url>http://yoursite.com/2016/11/23/Python%E5%88%B6%E4%BD%9Clibsvm%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h3 id="libsvm格式脚本要求"><a href="#libsvm格式脚本要求" class="headerlink" title="libsvm格式脚本要求"></a>libsvm格式脚本要求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">label 1:feature1 2:feature2 ... n:featuren</div></pre></td></tr></table></figure>
<p><strong>几点说明</strong></p>
<ol>
<li>测试数据以 UCI 的 <a href="http://archive.ics.uci.edu/ml/datasets/Abalone" target="_blank" rel="external">abalone</a> 数据集为例，将其转换成libesvm格式的数据。</li>
<li>abalone中含有字母，在执行本程序前，要先将它们转换成数值型数据。</li>
<li>libsvm标签中，特征值的标号必需从1开始，不可以从0开始。</li>
</ol>
<p><strong>示例代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line">from sys import argv</div><div class="line"></div><div class="line">script, input, output = argv // 虽然等号左边有三个参数，实际上只输入input和output即可 </div><div class="line"></div><div class="line">txt = open(input,&apos;r&apos;)	// 以读的方式打开文件</div><div class="line"></div><div class="line">svm_data = open(output,&apos;w&apos;)	// 以写的方式创建输出流</div><div class="line"></div><div class="line">for line in txt.readlines():	// readlines 一次性读取全部文件，然后逐行分析</div><div class="line">    features = line.split(&apos;,&apos;)</div><div class="line">    num = len(features) // 本例所使数据集，最后一列为label</div><div class="line">    svm_format = features[num-1].replace(&apos;\n&apos;,&apos;&apos;) // 获得label</div><div class="line">    for i in range(0,num-1):</div><div class="line">        svm_format = &quot;%s %d:%s&quot; % (svm_format,i+1,features[i])</div><div class="line">    svm_format = svm_format + &apos;\n&apos;</div><div class="line">    svm_data.write(svm_format)</div><div class="line">    print svm_format</div><div class="line"></div><div class="line">txt.close()</div><div class="line"></div><div class="line">svm_data.close()</div></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python scripy.py input.txt output.txt</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在IDEA中运行LinearRegression例子]]></title>
      <url>http://yoursite.com/2016/11/13/%E5%9C%A8IDEA%E4%B8%8A%E8%BF%90%E8%A1%8CLinearRegression%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li>运行的示例程序是saprk自带的ml库中的（还有一个mllib库，它比ml库旧，mllib库针对RDDs，ml库针对DF）；</li>
<li>直接在终端运行spark-example程序和在idea中运行，本质上是一样的，但有写细节的操作会导致出错；</li>
</ol>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>创建scala工程，选择的参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala version 2.10</div><div class="line">jdk 1.8</div></pre></td></tr></table></figure>
<p>编写build.sbt 文件，内容如下。其中，每行的空格是必须的。修改完sbt文件后不要忘记刷新，以便系统可以更新依赖包。（此外，scalaVersion的版本号和spark的版本号是有一定的对应关系的，不可以随便写，否则会产生错误。官网之前说1.6.2 版本的spark可以匹配任意版本2.10.x 的scala,但实际的操作似乎并不是这样，这部分以后再去研究。）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name := &quot;LinearRegression&quot;</div><div class="line"></div><div class="line">version := &quot;1.0&quot;</div><div class="line"></div><div class="line">scalaVersion := &quot;2.10.5&quot;</div><div class="line"></div><div class="line">libraryDependencies += &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;1.6.0&quot;</div></pre></td></tr></table></figure>
<p>在src/main/scala 下创建包 org.apache.spark.examples.ml 然后复制spark安装包下的example示例程序，从ml库中选择。分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DecisionTreeExample.scala</div><div class="line">LinearRegressionExample.scala</div></pre></td></tr></table></figure>
<font color="red">为什么要创建org.apache.spark.examples.ml 包？</font>

<p>目的是为了尽可能满足copy进来的两个文件运行所需要的环境。起初我并没有创建包，而是选择把copy的两个文件的package语句删掉，但结果是DecisionTreeExample里的一个函数一值无法找到，于是创建了包并加上package语句，终于不再报错。</p>
<p>现在，程序里肯定还会报很多错，那是因为还有两个重要的lib没有导入工程。点击 file-&gt;project structure 然后右下方向，scala laibrary 点那个 + ，添加如下两个jar包（本机目录：/Users/Dong/Documents/Spark/spark-1.6.2-bin-hadoop2.6/lib）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spark-assembly-1.6.2-hadoop2.6.0.jar</div><div class="line">spark-examples-1.6.2-hadoop2.6.0.jar</div></pre></td></tr></table></figure>
<p>添加完后，保存，即可。</p>
<p>此时静态的程序代码应该不会报错了。但还不可以运行。因为笔者也是刚学习spark，所以，没有搭建任何的集群，必需人为指定程序spark是在本机模式下运行的，否则程序会报错（大概是找不到 master url 的错）。</p>
<p>点击 run-&gt;edit configurations 配置以下参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">VM options: -Dspark.master=local</div><div class="line"></div><div class="line">Program arguments: </div><div class="line">--regParam</div><div class="line">0.15</div><div class="line">--elasticNetParam</div><div class="line">1.0</div><div class="line">/Users/Dong/Documents/Spark/spark-1.6.2-bin-hadoop2.6/data/mllib/sample_linear_regression_data.txt</div></pre></td></tr></table></figure>
<p>至此，程序已经可以运行成功了。</p>
<p>附上运行结果图,duang：<br><img src="https://github.com/dylan2wang/dylan2wang.github.io/blob/master/images/articleImages/001.png?raw=true" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub工作流程]]></title>
      <url>http://yoursite.com/2016/08/13/0001-GitHub%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><ul>
<li>git 是一种版本控制系统，github 是一个网站，给用户提供git服务，这样用户就不用再自己架设git系统；</li>
<li>在使用github时，本地和远程需要频繁打交道，因此本文所指github的工作流程是包含了远程和本地机器的，进行统一介绍，不再细分。</li>
</ul>
<h3 id="GitHub-整体工作流程"><a href="#GitHub-整体工作流程" class="headerlink" title="GitHub 整体工作流程"></a>GitHub 整体工作流程</h3><p><img src="http://image.beekka.com/blog/2014/bg2014061202.jpg" alt=""><br>(原图出处请见参考资料)<br><br>结合上图对github 实际工作流程进行解读。</p>
<ul>
<li>Remote ：表示github这个网站，它是远程的服务器，这上面存放的东西可以供小组成员共享。</li>
<li>Repository ： 中文译为仓库，在github网站上我们也可以看见这个词，创建了一个仓库就相当于创建了一个项目。图中的仓库表示的是在本地机器上的，而不是在github上的。一个Repository中可以存放一个项目的不同版本。我们把这一串版本称为分支。通常一个项目会有master分支，developer分支，bug分支等。</li>
<li>index ： 索引区。 另一种叫法是 stage，暂存区。我觉得第二种更为贴切。因为当我们从workspace区向repository提交作业时，实际上是先提交到index里，然后再提交到Repository中去。</li>
<li>workspace ： 本地的工作空间，它负责展示当前操作的项目版本。比如，当切换本地repository的不同版本时，或 从remote上拉取项目时，都会在workspace上展示，它是可见的。</li>
<li>add 和 commit ：在本地 workspace 中对项目进行任何的修改操作，均可以通过 add 操作添加到 index 中，我们可以多次执行 add 操作到 Index 里， 如果有多种不同文件的修改，需要多次执行add操作。 执行 commit 操作可以把 Index 里面的所有add进来的东西，一次性提交到 Repository。</li>
<li>push ： 执行该操作可以将本地版本库的当前版本推送到远程服务器上，即github网站上。这里本地版本库的当前版本不一定是最新版本。在本地 Repository 会有一个指针HEAD， 它所指向的版本就是当前版本。</li>
<li>pull 和 fetch 和 clone ：这三个操作都是将远程服务器的数据读取在本地。但各自的应用场景不同。clone 一般用于第一次从远程服务器拉取数据时，此时本地没有任何数据，需要从远程完整复制项目。fetch 操作会拉取远程仓库中的最新版本（最新都是指HEAD指针指向的版本）到本地仓库中，但它不会更新本地分支，也不会影响workspace的内容。如果再执行merge操作，则会更新本地的版本库，同时也会影响workspace。pull的作用就相当于 fetch＋merge操作。一般鼓励使用 fetch＋merge的形势。</li>
<li>checkout ： 用于切换分支。例如本地Repository中有master分支，还有feature分支，当前HEAD指向哪个分支的版本，则workspace就显示哪个版本的工作状态。</li>
</ul>
<p>以上就是关于GitHub工作模型的介绍，上面的图形所画的工作流程就是我们最常用的形式。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html?bsh_bid=458247941" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/06/git_remote.html?bsh_bid=458247941</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[滕王阁序]]></title>
      <url>http://yoursite.com/2016/07/30/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>本文章供测试使用 : )</p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>$$<br>J(\theta) = \frac 1 2 \sum<em>{i=1}^m (h</em>\theta(x^{(i)})-y^{(i)})^2<br>$$</p>
<h3 id="滕王阁序"><a href="#滕王阁序" class="headerlink" title="滕王阁序"></a>滕王阁序</h3><p>　　 豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃(fān)之榻。雄州雾列，俊采星驰，台隍(huáng)枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ )戟遥临；宇文新州之懿(yì)范，襜(chān )帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。 <br><br>　　时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨(yǎn)骖騑(cān fēi)于上路，访风景于崇阿(ē)。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流（一作 翔）丹，下临无地。鹤汀（tīng）凫(fú )渚（zhǔ），穷岛屿之萦(yíng)回；桂殿兰宫，即（一作 列）冈峦之体势。 <br><br>　　披绣闼（tà），俯雕甍(méng )。山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán) 扑地，钟鸣鼎食之家；舸（gě)舰弥津，青雀黄龙之舳（zhú）。云销雨霁(jì)，彩彻区明（或作 虹销雨霁，彩彻云衢 qú）。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（l ǐ）之滨；雁阵惊寒，声断衡阳之浦。 <br><br>　　遥襟甫畅，逸兴遄(chuán)飞。爽籁发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇眄(dì miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年。 <br><br>　　嗟(jiē)乎！时运不齐，命途多舛(chuǎn)；冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ <br><br>　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂(mèi)，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？<br><br>　　呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ) 泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。　 <br><br>　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。 <br><br>　　画栋朝飞南浦云，珠帘暮卷西山雨。 <br><br>　　闲云潭影日悠悠，物换星移几度秋。 <br><br>　　阁中帝子今何在？槛外长江空自流。</p>
]]></content>
    </entry>
    
  
  
</search>
